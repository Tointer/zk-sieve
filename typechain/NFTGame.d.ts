/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTGameInterface extends ethers.utils.Interface {
  functions: {
    "addGovernor(address)": FunctionFragment;
    "firstPlayerBySecondPlayer(address)": FunctionFragment;
    "getStatsOfNFT(address,uint256,uint256)": FunctionFragment;
    "governanceContracts(address)": FunctionFragment;
    "lobbyByFirstPlayer(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "register(address,uint256)": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setQuestionAnswered(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "firstPlayerBySecondPlayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatsOfNFT",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lobbyByFirstPlayer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestionAnswered",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPlayerBySecondPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatsOfNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lobbyByFirstPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestionAnswered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceContractAdded(address)": EventFragment;
    "GovernanceContractRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceContractRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type GovernanceContractAddedEvent = TypedEvent<
  [string] & { addr: string }
>;

export type GovernanceContractRemovedEvent = TypedEvent<
  [string] & { addr: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class NFTGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTGameInterface;

  functions: {
    addGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    firstPlayerBySecondPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getStatsOfNFT(address,uint256,uint256)"(
      collectionAddress: string,
      id: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        meleeAttack: number;
        rangedAttack: number;
        speed: number;
        health: number;
      }
    >;

    "getStatsOfNFT(uint256,uint256)"(
      seed: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        meleeAttack: number;
        rangedAttack: number;
        speed: number;
        health: number;
      }
    >;

    governanceContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lobbyByFirstPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        },
        [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        }
      ] & {
        firstParticipant: [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        };
        secondParticipant: [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      collectionAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQuestionAnswered(
      playerAddress: string,
      answered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  firstPlayerBySecondPlayer(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getStatsOfNFT(address,uint256,uint256)"(
    collectionAddress: string,
    id: BigNumberish,
    advantagePercents: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      meleeAttack: number;
      rangedAttack: number;
      speed: number;
      health: number;
    }
  >;

  "getStatsOfNFT(uint256,uint256)"(
    seed: BigNumberish,
    advantagePercents: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      meleeAttack: number;
      rangedAttack: number;
      speed: number;
      health: number;
    }
  >;

  governanceContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lobbyByFirstPlayer(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string, number] & {
        nftId: BigNumber;
        owner: string;
        nftAddress: string;
        questionState: number;
      },
      [BigNumber, string, string, number] & {
        nftId: BigNumber;
        owner: string;
        nftAddress: string;
        questionState: number;
      }
    ] & {
      firstParticipant: [BigNumber, string, string, number] & {
        nftId: BigNumber;
        owner: string;
        nftAddress: string;
        questionState: number;
      };
      secondParticipant: [BigNumber, string, string, number] & {
        nftId: BigNumber;
        owner: string;
        nftAddress: string;
        questionState: number;
      };
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    collectionAddress: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGovernor(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQuestionAnswered(
    playerAddress: string,
    answered: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(addr: string, overrides?: CallOverrides): Promise<boolean>;

    firstPlayerBySecondPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStatsOfNFT(address,uint256,uint256)"(
      collectionAddress: string,
      id: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        meleeAttack: number;
        rangedAttack: number;
        speed: number;
        health: number;
      }
    >;

    "getStatsOfNFT(uint256,uint256)"(
      seed: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        meleeAttack: number;
        rangedAttack: number;
        speed: number;
        health: number;
      }
    >;

    governanceContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lobbyByFirstPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        },
        [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        }
      ] & {
        firstParticipant: [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        };
        secondParticipant: [BigNumber, string, string, number] & {
          nftId: BigNumber;
          owner: string;
          nftAddress: string;
          questionState: number;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    register(
      collectionAddress: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGovernor(addr: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setQuestionAnswered(
      playerAddress: string,
      answered: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { fightHappened: boolean; winningAddress: string }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceContractAdded(address)"(
      addr?: null
    ): TypedEventFilter<[string], { addr: string }>;

    GovernanceContractAdded(
      addr?: null
    ): TypedEventFilter<[string], { addr: string }>;

    "GovernanceContractRemoved(address)"(
      addr?: null
    ): TypedEventFilter<[string], { addr: string }>;

    GovernanceContractRemoved(
      addr?: null
    ): TypedEventFilter<[string], { addr: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    firstPlayerBySecondPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStatsOfNFT(address,uint256,uint256)"(
      collectionAddress: string,
      id: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStatsOfNFT(uint256,uint256)"(
      seed: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lobbyByFirstPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      collectionAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQuestionAnswered(
      playerAddress: string,
      answered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    firstPlayerBySecondPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStatsOfNFT(address,uint256,uint256)"(
      collectionAddress: string,
      id: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStatsOfNFT(uint256,uint256)"(
      seed: BigNumberish,
      advantagePercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lobbyByFirstPlayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      collectionAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQuestionAnswered(
      playerAddress: string,
      answered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
